// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: Serve2.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Server2_FastReturnServer_FullMethodName = "/Server2/FastReturnServer"
	Server2_TellServer_FullMethodName       = "/Server2/TellServer"
)

// Server2Client is the client API for Server2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Server2Client interface {
	FastReturnServer(ctx context.Context, in *FastArgs2, opts ...grpc.CallOption) (*FastReply2, error)
	TellServer(ctx context.Context, in *FastArgs2, opts ...grpc.CallOption) (*FastReply2, error)
}

type server2Client struct {
	cc grpc.ClientConnInterface
}

func NewServer2Client(cc grpc.ClientConnInterface) Server2Client {
	return &server2Client{cc}
}

func (c *server2Client) FastReturnServer(ctx context.Context, in *FastArgs2, opts ...grpc.CallOption) (*FastReply2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FastReply2)
	err := c.cc.Invoke(ctx, Server2_FastReturnServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *server2Client) TellServer(ctx context.Context, in *FastArgs2, opts ...grpc.CallOption) (*FastReply2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FastReply2)
	err := c.cc.Invoke(ctx, Server2_TellServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server2Server is the server API for Server2 service.
// All implementations should embed UnimplementedServer2Server
// for forward compatibility.
type Server2Server interface {
	FastReturnServer(context.Context, *FastArgs2) (*FastReply2, error)
	TellServer(context.Context, *FastArgs2) (*FastReply2, error)
}

// UnimplementedServer2Server should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServer2Server struct{}

func (UnimplementedServer2Server) FastReturnServer(context.Context, *FastArgs2) (*FastReply2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastReturnServer not implemented")
}
func (UnimplementedServer2Server) TellServer(context.Context, *FastArgs2) (*FastReply2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TellServer not implemented")
}
func (UnimplementedServer2Server) testEmbeddedByValue() {}

// UnsafeServer2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Server2Server will
// result in compilation errors.
type UnsafeServer2Server interface {
	mustEmbedUnimplementedServer2Server()
}

func RegisterServer2Server(s grpc.ServiceRegistrar, srv Server2Server) {
	// If the following call pancis, it indicates UnimplementedServer2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Server2_ServiceDesc, srv)
}

func _Server2_FastReturnServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastArgs2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server2Server).FastReturnServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server2_FastReturnServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server2Server).FastReturnServer(ctx, req.(*FastArgs2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server2_TellServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastArgs2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server2Server).TellServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server2_TellServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server2Server).TellServer(ctx, req.(*FastArgs2))
	}
	return interceptor(ctx, in, info, handler)
}

// Server2_ServiceDesc is the grpc.ServiceDesc for Server2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Server2",
	HandlerType: (*Server2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FastReturnServer",
			Handler:    _Server2_FastReturnServer_Handler,
		},
		{
			MethodName: "TellServer",
			Handler:    _Server2_TellServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Serve2.proto",
}
