// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: Serve.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Serve_WriteRequest_FullMethodName = "/Serve/WriteRequest"
	Serve_ReadRequest_FullMethodName  = "/Serve/ReadRequest"
	Serve_FindLeader_FullMethodName   = "/Serve/FindLeader"
)

// ServeClient is the client API for Serve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServeClient interface {
	WriteRequest(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReply, error)
	ReadRequest(ctx context.Context, in *ReadArgs, opts ...grpc.CallOption) (*ReadReply, error)
	FindLeader(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReply, error)
}

type serveClient struct {
	cc grpc.ClientConnInterface
}

func NewServeClient(cc grpc.ClientConnInterface) ServeClient {
	return &serveClient{cc}
}

func (c *serveClient) WriteRequest(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, Serve_WriteRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serveClient) ReadRequest(ctx context.Context, in *ReadArgs, opts ...grpc.CallOption) (*ReadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, Serve_ReadRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serveClient) FindLeader(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, Serve_FindLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServeServer is the server API for Serve service.
// All implementations should embed UnimplementedServeServer
// for forward compatibility.
type ServeServer interface {
	WriteRequest(context.Context, *WriteArgs) (*WriteReply, error)
	ReadRequest(context.Context, *ReadArgs) (*ReadReply, error)
	FindLeader(context.Context, *WriteArgs) (*WriteReply, error)
}

// UnimplementedServeServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServeServer struct{}

func (UnimplementedServeServer) WriteRequest(context.Context, *WriteArgs) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRequest not implemented")
}
func (UnimplementedServeServer) ReadRequest(context.Context, *ReadArgs) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRequest not implemented")
}
func (UnimplementedServeServer) FindLeader(context.Context, *WriteArgs) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLeader not implemented")
}
func (UnimplementedServeServer) testEmbeddedByValue() {}

// UnsafeServeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServeServer will
// result in compilation errors.
type UnsafeServeServer interface {
	mustEmbedUnimplementedServeServer()
}

func RegisterServeServer(s grpc.ServiceRegistrar, srv ServeServer) {
	// If the following call pancis, it indicates UnimplementedServeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Serve_ServiceDesc, srv)
}

func _Serve_WriteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeServer).WriteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serve_WriteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeServer).WriteRequest(ctx, req.(*WriteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serve_ReadRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeServer).ReadRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serve_ReadRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeServer).ReadRequest(ctx, req.(*ReadArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serve_FindLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServeServer).FindLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Serve_FindLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServeServer).FindLeader(ctx, req.(*WriteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Serve_ServiceDesc is the grpc.ServiceDesc for Serve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Serve",
	HandlerType: (*ServeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteRequest",
			Handler:    _Serve_WriteRequest_Handler,
		},
		{
			MethodName: "ReadRequest",
			Handler:    _Serve_ReadRequest_Handler,
		},
		{
			MethodName: "FindLeader",
			Handler:    _Serve_FindLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Serve.proto",
}
